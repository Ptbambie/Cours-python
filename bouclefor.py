# -*- coding: utf-8 -*-
"""BoucleFor.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1_8vpnz2N8uMyKANlKZTjlZpeKOnKjjND

**LA BOUCLE FOR**

La boucle For nous permet de parcourir un itérable.
> Pour chaque animal dans la liste animaux,
    Met le en Majuscule et affiche le.
"""

animaux = ['chien', 'chat', 'abeille', 'oiseau']
for animal in animaux:
    animal = animal.upper()
    print(animal)

"""pour animal dans animaux:

    animal = animal.majuscule()
    affiche(animal)
"""

c_animaux = [] # liste vide pour stocker les animaux dont le nom commence par c
for animal in animaux:
    if animal.startswith('c'): # si animal commence par c
        c_animaux.append(animal) # ajoute animal à c_animaux
c_animaux

for lettre in "audrey":
    print(lettre)

for index, lettre in enumerate("Kevin"):
    print(index, lettre)

"""Autre chose qu'on peut faire avec la boucle for, c'est de parcourir une séquence de nombres. Ceci peut-être intéressant quand on veut repéter un comportement, un certain nombre de fois:

la fonction `range` permet de générer une séquence de nombre. Dans l'exemple précédent, range(5) permet de générer les nombres de 0 à 5-1=4. Voici d'autres séquences générées avec la fonction range:
"""

for i in range(5):
    print(i)

for i in range(1, 6):
    print(i)

for i in range(2, 10, 2): # un pas de deux
    print(i)

"""**La boucle While**

While veut dire **tant que** ou **pendant que**. La boucle while nous permet de répeter un comportement tant qu'une condition est vérifiée. On utilise la boucle while dans les cas où on n'a pas une idée exacte du nombre de fois qu'on devra repeter un bout de code. La syntaxe d'une boucle While est la suivante:
```python
while condition qui est vraie:
    Fais quelque chose
```
afficher des nombres de 10 à -2. Voilà donc un comportement qu'on va répéter tant que le nombre est  > ou égale à -2.
"""

nombre = 10
while nombre >= -2:
    print(nombre)
    nombre = nombre - 1 # reduisons nombre pour qu'éventuellement cette boucle s'arrête

"""**Break**

Dans une boucle, on peut vouloir s'arrêter dès qu'une condition est vérifié. Imagine qu'on veuille parcourir une liste de prénoms et dès qu'on rencontre le prenom "Ali", on s'arrête et affiche son index:
"""

prenoms = ['bob', 'alice', 'paul', 'ali', 'tom', 'toni']
for index, prenom in enumerate(prenoms):
    print(prenom)
    if prenom == 'ali':
        print(index)
        break

"""**Continue**

Le mot clé `continue` est comme break mais au lieu d'arrêter la boucle, il passe à l'itération suivante.

"""

prenoms = ['bob', 'alice', 'paul', 'ali', 'tom', 'toni']
for index, prenom in enumerate(prenoms):
    print(prenom)
    if prenom == 'ali':
        continue
    print("Je ne serai pas affiché pour ali")

