# -*- coding: utf-8 -*-
"""Les_variables_python.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1re892KmoAxP_r6ZIPk70WCTFtQE_qjie
"""

poids = 89

poids = 82

print(poids)

poids

2poids = 25

"""lage_de_mamie= 70"""

print(lage_de_mamie)

15 + 30

nombre= 5
print(nombre + 4)

96 -12

print(nombre - 2)

5*3

print(nombre * 2)

27 / 9

25 /2

25 // 2

2 ** 5

15 ** 0

89 % 2

est_pair = 27 % 2

est_pair

nombres_de_voitures = 5

nombres_de_voitures = nombres_de_voitures + 15

nombres_de_voitures

nombres_de_voitures += 15

nombres_de_voitures

"""**Odre de priorité des opération PEMDAS**

Parenthèses, Exposant, Multiplication
Division, Addition, Soustraction
"""

15 + 8 * 3 ** 2

(15 + 8) * 3 ** 2

"""**Les types de Variables**
Les nombres entiers
"""

age = 15
type(age)

"""**Les types de Variables**
Les nombres a virgules
"""

taille = 1.83
type(taille)

"""**Les types de Variables**
Les chaines de caractère "string"
"""

nom = "Sophie"
type(nom)

"""**Changement de type**

> On peut modifier les types int et float en str. Mais pour convertir un str en int ou float, il faut que le str ait un nombre entre les guillemets. En convertissant un float en int, on perd la partie après la virgule, et en converstissant un int en float, on lui ajoute `.0` à la fin.


"""

numero = "15"
numero_int =  int(numero)
type(numero_int)

poids = "18.69"
poids = float(poids)
poids

"""**Les listes**

types = collections

1er type : list pour ordonnée des éléments
"""

notes = [18, 15, 13, 20]
blabla = ["Kevin", 15, 25.25, [5], "1"]
notes[0]
notes[2]

"""Une liste ne contient pas que des nombres.On peut stocker n'importe quel type de données dans une liste. La liste suivante contient même une liste:



1.   On a dit qu'une liste était une collection ordonnée d'éléments. C'est à dire que chaque élément de la liste a une position. On peut donc référencer un élément ou l'extraire avec sa position. **En Python, les positions commencent à partir de 0, on parle de l'index d'un élément dans une liste**. Essayons d'extraire le premier élémént de la liste `notes`, c'est l'élément `18` dont l'index est 0.
2.   Pour donc extraire un élément d'une liste, on fait `nom_de_la_variable`[index].

L'index peut aussi être négatif. Dans ce genre de cas, on compte les éléments à partir du dernier élément de la liste. Notre liste `notes` se termine par 20. Son index est 3, mais aussi -1


"""

blabla[3]

type(blabla[3])

notes = [18, 15, 13, 20]

notes[-2]

notes[-2] = 15

notes

"""Pour donc modifier un élément dans une liste, il faut extraire et faire `= nouvelle valeur ou élément`.

Il est possible d'extraire une plage d'élément dans une liste. Par exemple, on se demande quelles sont 2 premiers éléments dans notre liste, c'est à dire les éléments dont les indexs sont 0 et 1. Il s'agit de 18 et 15. Voyons comment faire:
"""

notes[0:2]

"""Il s'agit là d'une nouvelle notation. Entre les crochets, on a `0:2`. On dirait qu'on a fait `index du premier element : index du dernier element + 1`. Verifions si c'est vrai en extrayant les 3 derniers éléments, c'est à dire les élements 15, 15 et 20. L'index du premier élément est 1 et le dernier est 3, on fera donc `1:3+1`. Essayons:

```
# Ce texte est au format code
```


"""

notes[1:4]

"""On dirait que ca marche. Est-ce que c'est possible de faire la même extraction avec les indexs négatifs.

Essayons d'extraire les deux 15 au milieu de la liste. L'index du premier 15 est -3 et celui du second 15 est -2, on fera donc `-3: -2+1`. Essayons:
"""

notes[-3: -1]

liste_aleatoire = [ 14, 58, 45, -9, "ballon", "kevin", 12]
len(liste_aleatoire)

"""Comment ajouter le mot `python` à notre liste. Cet élément aura l'index 7. Peut-on faire

`liste_aleatoire[7] = "python"` ?
"""

liste_aleatoire[7] = "python"

"""On obtient une erreur. Quand je traduis cette erreur en Français, ca donne :
> IndexError: index d'affectation de liste hors limites

On dirait que Python a essayé de faire une modification et l'index 7 est hors des limites 0-6 de notre liste.
Comment faire alors ? Voici une opportunité de chercher sur Google `Comment ajouter un élément à une liste Python ?`. Apprendre à trouver les solutions à ces problèmes grâce à Google est une qualité important de tout programmeur.
"""

liste_aleatoire.append('python')
liste_aleatoire

""" ajouter le mot `data` entre 45 et -9 au lieu de l'ajouter à la fin de la liste. On parle alors d'insertion dans une liste."""

liste_aleatoire.insert(3, 'data')
liste_aleatoire

"""1.   Insert = insérer a un endroit précis
2.   remove = supprimer
3.   del = supprimer un élément sans le connaitre
4. etc...

**Les tuples**

c'est commme les listes mais elle ne peut pas être modifié

**Dictionnaire**

C'est une collection de clé-valeurs comme par exemple un annuaire qui est une collection de nom-numero de téléphone.
"""

annuaire = {"Sophie": "06545885852",
            "Paul": "06466548454"}
type(annuaire)

annuaire["Sophie"]

annuaire = {"Sophie": "06545885852",
            "Paul": "06466548454",
            "rock_ray":["066545", "06454"]}
print(annuaire)

annuaire["rock_ray"]

annuaire["rock_ray"][0]

annuaire["rock_ray"].append("060483")
annuaire

annuaire.items()

"""ITEMS est un fonction qui affiche la  clé et sa valeur"""

annuaire.values()

annuaire.keys()

"""**Les F-strings**

On a les variables `nom`, `prenom`,  `age` et on aimerait afficher un message spécial:
> Je suis `prenom` `nom` et j'ai `age` ans. Voici comment le faire :
"""

nom = "TY"
prenom = "Sophie"
age = 23
message = f"Je suis {prenom} {nom} et j'ai {age} ans"
print(message)

"""Un f-string est une chaine de caractères qui commence par un f avant les " ", et dans laquelle on garde le nom des variables mais en les gardant entre des accolades { }"""